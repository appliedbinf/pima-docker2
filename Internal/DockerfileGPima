# FROM nvidia/cuda:11.4.2-devel-ubuntu20.04
FROM nvidia/cuda:12.2.2-devel-ubuntu20.04
# FROM ubuntu:focal-20231003

RUN apt-get update

ENV PATH="/home/miniconda/bin:${PATH}"
ARG PATH="/home/miniconda/bin:${PATH}"

RUN apt-get install -y libgd-perl
RUN apt-get install -y git

RUN apt-get install -y wget && rm -rf /var/lib/apt/lists/*

RUN wget \
    https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh \
    #&& mkdir /home/miniconda \
    && bash Miniconda3-latest-Linux-x86_64.sh -b -p /home/miniconda \
    && rm -f Miniconda3-latest-Linux-x86_64.sh

RUN conda config --prepend channels conda-forge
RUN conda config --prepend channels bioconda

RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y locales

RUN sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen && \
    dpkg-reconfigure --frontend=noninteractive locales && \
    update-locale LANG=en_US.UTF-8

ENV LANG en_US.UTF-8
# Pull The latest In

RUN mkdir /home/DockerDir

ADD ./ /home/DockerDir
ARG HOST_CHANNEL_PATH=pima_channel
ARG CHANNEL_PATH=/home/PimaChannel
 
ADD $HOST_CHANNEL_PATH $CHANNEL_PATH

WORKDIR /home/DockerDir/

# WE MAY NOT NEED IT ANYMORE
#RUN conda env update -n base --file /home/DockerDir/environment.yml

#RUN sed -i 's/cgi/html/g' /home/miniconda/lib/python3.8/site-packages/quast_libs/site_packages/jsontemplate/jsontemplate.py

#RUN conda create -n medaka -c conda-forge -c bioconda medaka
#RUN medaka tools download_models

# Pull The latest In
# RUN git clone https://github.com/appliedbinf/pima_md.git 

# copy the local conda package channel directory
# TODO: Change to mamba?
# TODO: Copy channel location to docker1
RUN conda install -n base --override-channels -c conda-forge mamba python=3.8
# mamba install -c conda-forge python=3.12.0
# RUN mamba install -c conda-forge -c bioconda -c appliedbinf pima=1.7.1=py38_1
RUN mamba install -c conda-forge -c bioconda -c $CHANNEL_PATH pima=1.7.1=py38_1


# untar it
# RUN mkdir pima
# RUN mv pima-1.7.1-py38_1.tar.bz2 pima/ && cd pima
# RUN tar -xvf pima-1.7.1-py38_1.tar.bz2 && rm pima-1.7.1-py38_1.tar.bz2
# RUN cd ..


RUN tar -xvf ont-guppy_6.0.1_linux64.tar.gz && mv ont-guppy /home/DockerDir/guppy && rm ont-guppy_6.0.1_linux64.tar.gz
# RUN tar -xvf dorado-0.4.2-linux-x64.tar && mv dorado-0.4.2-linux-x64 /home/DockerDir/dorado && rm dorado-0.4.2-linux-x64.tar

ENV PATH /home/DockerDir/guppy/bin:$PATH
ENV PATH /home/DockerDir/pima:$PATH
# ENV PATH /data/reference_files/:$PATH
# ENV REFERENCE="data/reference_files/"
#ENV KRAKEN2_DB_PATH="/data/kraken2"

RUN wget http://pima.appliedbinf.com/data/plasmids_and_vectors.fasta
RUN mv plasmids_and_vectors.fasta /home/miniconda/lib/python3.8/site-packages/pima/data/plasmids_and_vectors.fasta

SHELL ["/bin/bash", "-c"]

#WORKDIR /data/instance/uploads/

#Set Pimascript as the entrypoint
ENTRYPOINT ["/bin/bash", "/home/DockerDir/pima_gap.sh"]
#Set the Default parameters for testing
CMD ["--help"]